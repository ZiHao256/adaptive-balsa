2024-06-15 05:31:47.991 UTC [3141599] LOG:  starting PostgreSQL 12.5 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, 64-bit
2024-06-15 05:31:47.992 UTC [3141599] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2024-06-15 05:31:47.992 UTC [3141599] LOG:  listening on IPv6 address "::", port 5432
2024-06-15 05:31:48.029 UTC [3141599] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2024-06-15 05:31:48.475 UTC [3141600] LOG:  database system was shut down at 2024-06-15 05:31:46 UTC
2024-06-15 05:31:48.509 UTC [3141599] LOG:  database system is ready to accept connections
2024-06-15 05:32:07.457 UTC [3141609] LOG:  checkpoints are occurring too frequently (18 seconds apart)
2024-06-15 05:32:07.457 UTC [3141609] HINT:  Consider increasing the configuration parameter "max_wal_size".
2024-06-15 05:32:31.379 UTC [3141609] LOG:  checkpoints are occurring too frequently (24 seconds apart)
2024-06-15 05:32:31.379 UTC [3141609] HINT:  Consider increasing the configuration parameter "max_wal_size".
2024-06-15 05:43:20.576 UTC [3141681] ytzheng@imdbload ERROR:  canceling statement due to user request
2024-06-15 05:43:20.576 UTC [3141681] ytzheng@imdbload CONTEXT:  COPY cast_info, line 26598739: "26598738,2604936,888573,,(drama developed by) (as Toksvig),,4"
2024-06-15 05:43:20.576 UTC [3141681] ytzheng@imdbload STATEMENT:  COPY  cast_info FROM STDIN escape '\' csv header
2024-06-15 05:46:05.177 UTC [3141599] LOG:  received fast shutdown request
2024-06-15 05:46:05.244 UTC [3141599] LOG:  aborting any active transactions
2024-06-15 05:46:05.244 UTC [3146568] FATAL:  terminating autovacuum process due to administrator command
2024-06-15 05:46:05.245 UTC [3141599] LOG:  background worker "logical replication launcher" (PID 3141614) exited with exit code 1
2024-06-15 05:46:05.584 UTC [3141609] LOG:  shutting down
2024-06-15 05:46:13.404 UTC [3141599] LOG:  database system is shut down
2024-06-15 05:49:54.254 UTC [3149592] LOG:  starting PostgreSQL 12.5 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, 64-bit
2024-06-15 05:49:54.254 UTC [3149592] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2024-06-15 05:49:54.254 UTC [3149592] LOG:  listening on IPv6 address "::", port 5432
2024-06-15 05:49:54.300 UTC [3149592] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2024-06-15 05:49:54.571 UTC [3149599] LOG:  database system was shut down at 2024-06-15 05:46:11 UTC
2024-06-15 05:49:54.606 UTC [3149592] LOG:  database system is ready to accept connections
2024-06-15 05:49:54.642 UTC [3149608] ytzheng@postgres ERROR:  database "imdbload" already exists
2024-06-15 05:49:54.642 UTC [3149608] ytzheng@postgres STATEMENT:  CREATE DATABASE imdbload;
2024-06-15 05:50:26.997 UTC [3149794] ytzheng@immmmmmdbload FATAL:  database "immmmmmdbload" does not exist
2024-06-15 06:08:58.962 UTC [3155894] FATAL:  lock file "postmaster.pid" already exists
2024-06-15 06:08:58.962 UTC [3155894] HINT:  Is another postmaster (PID 3149592) running in data directory "/data/ytzheng/imdb"?
2024-06-15 15:09:24.937 UTC [3401450] [unknown]@[unknown] LOG:  could not receive data from client: Connection reset by peer
2024-06-15 15:14:24.647 UTC [3402913] [unknown]@[unknown] LOG:  could not receive data from client: Connection reset by peer
2024-06-15 15:29:04.911 UTC [3408310] [unknown]@[unknown] LOG:  could not receive data from client: Connection reset by peer
2024-06-16 02:29:30.311 UTC [3678012] ytzheng@imdbload ERROR:  canceling statement due to statement timeout
2024-06-16 02:29:30.311 UTC [3678012] ytzheng@imdbload STATEMENT:  /*+ NestLoop(cn kt k mk mc cc cct1 mi t ct it1)
	 MergeJoin(cn kt k mk mc cc cct1 mi t ct)
	 HashJoin(kt k mk mc cc cct1 mi t ct)
	 NestLoop(k mk mc cc cct1 mi t ct)
	 MergeJoin(k mk mc cc cct1 mi t)
	 NestLoop(k mk mc cc cct1 mi)
	 MergeJoin(k mk mc cc cct1)
	 HashJoin(k mk mc cc)
	 NestLoop(k mk mc)
	 HashJoin(k mk)
	 SeqScan(cn)
	 SeqScan(kt)
	 IndexScan(k)
	 IndexScan(mk)
	 IndexScan(mc)
	 IndexScan(cc)
	 SeqScan(cct1)
	 IndexScan(mi)
	 SeqScan(t)
	 IndexScan(ct)
	 IndexScan(it1)
	 Leading(((cn (kt (((((((k mk) mc) cc) cct1) mi) t) ct))) it1)) */
	explain (verbose, analyze, format json)
	SELECT MIN(kt.kind) AS movie_kind,
	       MIN(t.title) AS complete_us_internet_movie
	FROM complete_cast AS cc,
	     comp_cast_type AS cct1,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cct1.kind = 'complete+verified'
	  AND cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND kt.kind IN ('movie',
	                  'tv movie',
	                  'video movie',
	                  'video game')
	  AND mi.note LIKE '%internet%'
	  AND mi.info IS NOT NULL
	  AND (mi.info LIKE 'USA:% 199%'
	       OR mi.info LIKE 'USA:% 200%')
	  AND t.production_year > 1990
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND t.id = cc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = cc.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = cc.movie_id
	  AND mc.movie_id = cc.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id
	  AND cct1.id = cc.status_id;
	
	
2024-06-16 02:50:10.344 UTC [3697213] ytzheng@imdbload ERROR:  canceling statement due to statement timeout
2024-06-16 02:50:10.344 UTC [3697213] ytzheng@imdbload STATEMENT:  /*+ NestLoop(cn ct cc k mk t kt mc mi cct1 it1)
	 HashJoin(cn ct cc k mk t kt mc mi cct1)
	 HashJoin(ct cc k mk t kt mc mi cct1)
	 MergeJoin(cc k mk t kt mc mi cct1)
	 HashJoin(cc k mk t kt mc mi)
	 NestLoop(k mk t kt mc mi)
	 HashJoin(k mk t kt mc)
	 NestLoop(k mk t kt)
	 HashJoin(k mk t)
	 MergeJoin(mk t)
	 SeqScan(cn)
	 IndexScan(ct)
	 SeqScan(cc)
	 IndexScan(k)
	 SeqScan(mk)
	 IndexScan(t)
	 IndexScan(kt)
	 IndexScan(mc)
	 IndexScan(mi)
	 SeqScan(cct1)
	 IndexScan(it1)
	 Leading(((cn (ct ((cc ((((k (mk t)) kt) mc) mi)) cct1))) it1)) */
	explain (verbose, analyze, format json)
	SELECT MIN(kt.kind) AS movie_kind,
	       MIN(t.title) AS complete_us_internet_movie
	FROM complete_cast AS cc,
	     comp_cast_type AS cct1,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cct1.kind = 'complete+verified'
	  AND cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND kt.kind IN ('movie',
	                  'tv movie',
	                  'video movie',
	                  'video game')
	  AND mi.note LIKE '%internet%'
	  AND mi.info IS NOT NULL
	  AND (mi.info LIKE 'USA:% 199%'
	       OR mi.info LIKE 'USA:% 200%')
	  AND t.production_year > 1990
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND t.id = cc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = cc.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = cc.movie_id
	  AND mc.movie_id = cc.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id
	  AND cct1.id = cc.status_id;
	
	
2024-06-16 02:51:20.183 UTC [3697247] ytzheng@imdbload ERROR:  canceling statement due to statement timeout
2024-06-16 02:51:20.183 UTC [3697247] ytzheng@imdbload STATEMENT:  /*+ HashJoin(ct t at mc mk mi cn it1 k)
	 HashJoin(t at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1)
	 NestLoop(at mc mk mi cn)
	 NestLoop(at mc mk mi)
	 MergeJoin(at mc mk)
	 MergeJoin(at mc)
	 SeqScan(ct)
	 IndexScan(t)
	 SeqScan(at)
	 SeqScan(mc)
	 SeqScan(mk)
	 IndexScan(mi)
	 IndexScan(cn)
	 IndexScan(it1)
	 IndexScan(k)
	 Leading((ct (t ((((((at mc) mk) mi) cn) it1) k)))) */
	explain (verbose, analyze, format json)
	SELECT MIN(at.title) AS aka_title,
	       MIN(t.title) AS internet_movie_title
	FROM aka_title AS at,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND mi.note LIKE '%internet%'
	  AND t.production_year > 1990
	  AND t.id = at.movie_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = at.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = at.movie_id
	  AND mc.movie_id = at.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id;
	
	
2024-06-16 02:51:20.183 UTC [3697250] FATAL:  terminating connection due to administrator command
2024-06-16 02:51:20.183 UTC [3697250] STATEMENT:  /*+ HashJoin(ct t at mc mk mi cn it1 k)
	 HashJoin(t at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1)
	 NestLoop(at mc mk mi cn)
	 NestLoop(at mc mk mi)
	 MergeJoin(at mc mk)
	 MergeJoin(at mc)
	 SeqScan(ct)
	 IndexScan(t)
	 SeqScan(at)
	 SeqScan(mc)
	 SeqScan(mk)
	 IndexScan(mi)
	 IndexScan(cn)
	 IndexScan(it1)
	 IndexScan(k)
	 Leading((ct (t ((((((at mc) mk) mi) cn) it1) k)))) */
	explain (verbose, analyze, format json)
	SELECT MIN(at.title) AS aka_title,
	       MIN(t.title) AS internet_movie_title
	FROM aka_title AS at,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND mi.note LIKE '%internet%'
	  AND t.production_year > 1990
	  AND t.id = at.movie_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = at.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = at.movie_id
	  AND mc.movie_id = at.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id;
	
	
2024-06-16 02:51:20.183 UTC [3697248] FATAL:  terminating connection due to administrator command
2024-06-16 02:51:20.183 UTC [3697248] STATEMENT:  /*+ HashJoin(ct t at mc mk mi cn it1 k)
	 HashJoin(t at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1)
	 NestLoop(at mc mk mi cn)
	 NestLoop(at mc mk mi)
	 MergeJoin(at mc mk)
	 MergeJoin(at mc)
	 SeqScan(ct)
	 IndexScan(t)
	 SeqScan(at)
	 SeqScan(mc)
	 SeqScan(mk)
	 IndexScan(mi)
	 IndexScan(cn)
	 IndexScan(it1)
	 IndexScan(k)
	 Leading((ct (t ((((((at mc) mk) mi) cn) it1) k)))) */
	explain (verbose, analyze, format json)
	SELECT MIN(at.title) AS aka_title,
	       MIN(t.title) AS internet_movie_title
	FROM aka_title AS at,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND mi.note LIKE '%internet%'
	  AND t.production_year > 1990
	  AND t.id = at.movie_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = at.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = at.movie_id
	  AND mc.movie_id = at.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id;
	
	
2024-06-16 02:51:20.183 UTC [3697251] FATAL:  terminating connection due to administrator command
2024-06-16 02:51:20.183 UTC [3697251] STATEMENT:  /*+ HashJoin(ct t at mc mk mi cn it1 k)
	 HashJoin(t at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1)
	 NestLoop(at mc mk mi cn)
	 NestLoop(at mc mk mi)
	 MergeJoin(at mc mk)
	 MergeJoin(at mc)
	 SeqScan(ct)
	 IndexScan(t)
	 SeqScan(at)
	 SeqScan(mc)
	 SeqScan(mk)
	 IndexScan(mi)
	 IndexScan(cn)
	 IndexScan(it1)
	 IndexScan(k)
	 Leading((ct (t ((((((at mc) mk) mi) cn) it1) k)))) */
	explain (verbose, analyze, format json)
	SELECT MIN(at.title) AS aka_title,
	       MIN(t.title) AS internet_movie_title
	FROM aka_title AS at,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND mi.note LIKE '%internet%'
	  AND t.production_year > 1990
	  AND t.id = at.movie_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = at.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = at.movie_id
	  AND mc.movie_id = at.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id;
	
	
2024-06-16 02:51:20.183 UTC [3697249] FATAL:  terminating connection due to administrator command
2024-06-16 02:51:20.183 UTC [3697249] STATEMENT:  /*+ HashJoin(ct t at mc mk mi cn it1 k)
	 HashJoin(t at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1 k)
	 NestLoop(at mc mk mi cn it1)
	 NestLoop(at mc mk mi cn)
	 NestLoop(at mc mk mi)
	 MergeJoin(at mc mk)
	 MergeJoin(at mc)
	 SeqScan(ct)
	 IndexScan(t)
	 SeqScan(at)
	 SeqScan(mc)
	 SeqScan(mk)
	 IndexScan(mi)
	 IndexScan(cn)
	 IndexScan(it1)
	 IndexScan(k)
	 Leading((ct (t ((((((at mc) mk) mi) cn) it1) k)))) */
	explain (verbose, analyze, format json)
	SELECT MIN(at.title) AS aka_title,
	       MIN(t.title) AS internet_movie_title
	FROM aka_title AS at,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND mi.note LIKE '%internet%'
	  AND t.production_year > 1990
	  AND t.id = at.movie_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = at.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = at.movie_id
	  AND mc.movie_id = at.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id;
	
	
2024-06-16 02:51:20.264 UTC [3149592] LOG:  background worker "parallel worker" (PID 3697251) exited with exit code 1
2024-06-16 02:51:20.265 UTC [3149592] LOG:  background worker "parallel worker" (PID 3697249) exited with exit code 1
2024-06-16 02:51:20.270 UTC [3149592] LOG:  background worker "parallel worker" (PID 3697248) exited with exit code 1
2024-06-16 02:51:20.270 UTC [3149592] LOG:  background worker "parallel worker" (PID 3697250) exited with exit code 1
2024-06-16 02:55:20.277 UTC [3698778] ytzheng@imdbload ERROR:  canceling statement due to statement timeout
2024-06-16 02:55:20.277 UTC [3698778] ytzheng@imdbload STATEMENT:  /*+ MergeJoin(kt ct it2 mi_idx mc mk t cn mi k it1)
	 MergeJoin(kt ct it2 mi_idx mc mk t cn mi k)
	 MergeJoin(ct it2 mi_idx mc mk t cn mi k)
	 MergeJoin(it2 mi_idx mc mk t cn mi k)
	 HashJoin(mi_idx mc mk t cn mi k)
	 NestLoop(mi_idx mc mk t cn mi)
	 HashJoin(mi_idx mc mk t cn)
	 MergeJoin(mi_idx mc mk t)
	 MergeJoin(mc mk t)
	 HashJoin(mc mk)
	 SeqScan(kt)
	 IndexScan(ct)
	 IndexScan(it2)
	 IndexScan(mi_idx)
	 IndexScan(mc)
	 SeqScan(mk)
	 SeqScan(t)
	 SeqScan(cn)
	 IndexScan(mi)
	 SeqScan(k)
	 IndexScan(it1)
	 Leading(((kt (ct (it2 ((((mi_idx ((mc mk) t)) cn) mi) k)))) it1)) */
	explain (verbose, analyze, format json)
	SELECT MIN(cn.name) AS movie_company,
	       MIN(mi_idx.info) AS rating,
	       MIN(t.title) AS western_violent_movie
	FROM company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     info_type AS it2,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_info_idx AS mi_idx,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code != '[us]'
	  AND it1.info = 'countries'
	  AND it2.info = 'rating'
	  AND k.keyword IN ('murder',
	                    'murder-in-title',
	                    'blood',
	                    'violence')
	  AND kt.kind IN ('movie',
	                  'episode')
	  AND mi.info IN ('Sweden',
	                  'Norway',
	                  'Germany',
	                  'Denmark',
	                  'Swedish',
	                  'Danish',
	                  'Norwegian',
	                  'German',
	                  'USA',
	                  'American')
	  AND mi_idx.info < '8.5'
	  AND t.production_year > 2005
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mi_idx.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mi_idx.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mi.movie_id = mi_idx.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mc.movie_id = mi_idx.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND it2.id = mi_idx.info_type_id
	  AND ct.id = mc.company_type_id
	  AND cn.id = mc.company_id;
	
	
2024-06-16 02:55:20.277 UTC [3698779] FATAL:  terminating connection due to administrator command
2024-06-16 02:55:20.277 UTC [3698779] STATEMENT:  /*+ MergeJoin(kt ct it2 mi_idx mc mk t cn mi k it1)
	 MergeJoin(kt ct it2 mi_idx mc mk t cn mi k)
	 MergeJoin(ct it2 mi_idx mc mk t cn mi k)
	 MergeJoin(it2 mi_idx mc mk t cn mi k)
	 HashJoin(mi_idx mc mk t cn mi k)
	 NestLoop(mi_idx mc mk t cn mi)
	 HashJoin(mi_idx mc mk t cn)
	 MergeJoin(mi_idx mc mk t)
	 MergeJoin(mc mk t)
	 HashJoin(mc mk)
	 SeqScan(kt)
	 IndexScan(ct)
	 IndexScan(it2)
	 IndexScan(mi_idx)
	 IndexScan(mc)
	 SeqScan(mk)
	 SeqScan(t)
	 SeqScan(cn)
	 IndexScan(mi)
	 SeqScan(k)
	 IndexScan(it1)
	 Leading(((kt (ct (it2 ((((mi_idx ((mc mk) t)) cn) mi) k)))) it1)) */
	explain (verbose, analyze, format json)
	SELECT MIN(cn.name) AS movie_company,
	       MIN(mi_idx.info) AS rating,
	       MIN(t.title) AS western_violent_movie
	FROM company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     info_type AS it2,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_info_idx AS mi_idx,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code != '[us]'
	  AND it1.info = 'countries'
	  AND it2.info = 'rating'
	  AND k.keyword IN ('murder',
	                    'murder-in-title',
	                    'blood',
	                    'violence')
	  AND kt.kind IN ('movie',
	                  'episode')
	  AND mi.info IN ('Sweden',
	                  'Norway',
	                  'Germany',
	                  'Denmark',
	                  'Swedish',
	                  'Danish',
	                  'Norwegian',
	                  'German',
	                  'USA',
	                  'American')
	  AND mi_idx.info < '8.5'
	  AND t.production_year > 2005
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mi_idx.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mi_idx.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mi.movie_id = mi_idx.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mc.movie_id = mi_idx.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND it2.id = mi_idx.info_type_id
	  AND ct.id = mc.company_type_id
	  AND cn.id = mc.company_id;
	
	
2024-06-16 02:55:20.277 UTC [3698781] FATAL:  terminating connection due to administrator command
2024-06-16 02:55:20.277 UTC [3698781] STATEMENT:  /*+ MergeJoin(kt ct it2 mi_idx mc mk t cn mi k it1)
	 MergeJoin(kt ct it2 mi_idx mc mk t cn mi k)
	 MergeJoin(ct it2 mi_idx mc mk t cn mi k)
	 MergeJoin(it2 mi_idx mc mk t cn mi k)
	 HashJoin(mi_idx mc mk t cn mi k)
	 NestLoop(mi_idx mc mk t cn mi)
	 HashJoin(mi_idx mc mk t cn)
	 MergeJoin(mi_idx mc mk t)
	 MergeJoin(mc mk t)
	 HashJoin(mc mk)
	 SeqScan(kt)
	 IndexScan(ct)
	 IndexScan(it2)
	 IndexScan(mi_idx)
	 IndexScan(mc)
	 SeqScan(mk)
	 SeqScan(t)
	 SeqScan(cn)
	 IndexScan(mi)
	 SeqScan(k)
	 IndexScan(it1)
	 Leading(((kt (ct (it2 ((((mi_idx ((mc mk) t)) cn) mi) k)))) it1)) */
	explain (verbose, analyze, format json)
	SELECT MIN(cn.name) AS movie_company,
	       MIN(mi_idx.info) AS rating,
	       MIN(t.title) AS western_violent_movie
	FROM company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     info_type AS it2,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_info_idx AS mi_idx,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code != '[us]'
	  AND it1.info = 'countries'
	  AND it2.info = 'rating'
	  AND k.keyword IN ('murder',
	                    'murder-in-title',
	                    'blood',
	                    'violence')
	  AND kt.kind IN ('movie',
	                  'episode')
	  AND mi.info IN ('Sweden',
	                  'Norway',
	                  'Germany',
	                  'Denmark',
	                  'Swedish',
	                  'Danish',
	                  'Norwegian',
	                  'German',
	                  'USA',
	                  'American')
	  AND mi_idx.info < '8.5'
	  AND t.production_year > 2005
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mi_idx.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mi_idx.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mi.movie_id = mi_idx.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mc.movie_id = mi_idx.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND it2.id = mi_idx.info_type_id
	  AND ct.id = mc.company_type_id
	  AND cn.id = mc.company_id;
	
	
2024-06-16 02:55:20.277 UTC [3698780] FATAL:  terminating connection due to administrator command
2024-06-16 02:55:20.277 UTC [3698780] STATEMENT:  /*+ MergeJoin(kt ct it2 mi_idx mc mk t cn mi k it1)
	 MergeJoin(kt ct it2 mi_idx mc mk t cn mi k)
	 MergeJoin(ct it2 mi_idx mc mk t cn mi k)
	 MergeJoin(it2 mi_idx mc mk t cn mi k)
	 HashJoin(mi_idx mc mk t cn mi k)
	 NestLoop(mi_idx mc mk t cn mi)
	 HashJoin(mi_idx mc mk t cn)
	 MergeJoin(mi_idx mc mk t)
	 MergeJoin(mc mk t)
	 HashJoin(mc mk)
	 SeqScan(kt)
	 IndexScan(ct)
	 IndexScan(it2)
	 IndexScan(mi_idx)
	 IndexScan(mc)
	 SeqScan(mk)
	 SeqScan(t)
	 SeqScan(cn)
	 IndexScan(mi)
	 SeqScan(k)
	 IndexScan(it1)
	 Leading(((kt (ct (it2 ((((mi_idx ((mc mk) t)) cn) mi) k)))) it1)) */
	explain (verbose, analyze, format json)
	SELECT MIN(cn.name) AS movie_company,
	       MIN(mi_idx.info) AS rating,
	       MIN(t.title) AS western_violent_movie
	FROM company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     info_type AS it2,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_info_idx AS mi_idx,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code != '[us]'
	  AND it1.info = 'countries'
	  AND it2.info = 'rating'
	  AND k.keyword IN ('murder',
	                    'murder-in-title',
	                    'blood',
	                    'violence')
	  AND kt.kind IN ('movie',
	                  'episode')
	  AND mi.info IN ('Sweden',
	                  'Norway',
	                  'Germany',
	                  'Denmark',
	                  'Swedish',
	                  'Danish',
	                  'Norwegian',
	                  'German',
	                  'USA',
	                  'American')
	  AND mi_idx.info < '8.5'
	  AND t.production_year > 2005
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mi_idx.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mi_idx.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mi.movie_id = mi_idx.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mc.movie_id = mi_idx.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND it2.id = mi_idx.info_type_id
	  AND ct.id = mc.company_type_id
	  AND cn.id = mc.company_id;
	
	
2024-06-16 02:55:20.413 UTC [3149592] LOG:  background worker "parallel worker" (PID 3698779) exited with exit code 1
2024-06-16 02:55:20.426 UTC [3149592] LOG:  background worker "parallel worker" (PID 3698781) exited with exit code 1
2024-06-16 02:55:20.489 UTC [3149592] LOG:  background worker "parallel worker" (PID 3698780) exited with exit code 1
2024-06-16 02:57:45.746 UTC [3699537] ytzheng@imdbload ERROR:  canceling statement due to statement timeout
2024-06-16 02:57:45.746 UTC [3699537] ytzheng@imdbload STATEMENT:  /*+ MergeJoin(cct1 ct cn cc kt k mc mk t mi it1)
	 HashJoin(cct1 ct cn cc kt k mc mk t mi)
	 HashJoin(ct cn cc kt k mc mk t mi)
	 MergeJoin(cn cc kt k mc mk t mi)
	 NestLoop(cc kt k mc mk t mi)
	 HashJoin(cc kt k mc mk t)
	 MergeJoin(kt k mc mk t)
	 NestLoop(k mc mk t)
	 HashJoin(k mc mk)
	 MergeJoin(mc mk)
	 IndexScan(cct1)
	 SeqScan(ct)
	 SeqScan(cn)
	 SeqScan(cc)
	 SeqScan(kt)
	 IndexScan(k)
	 SeqScan(mc)
	 IndexScan(mk)
	 IndexScan(t)
	 IndexScan(mi)
	 IndexScan(it1)
	 Leading(((cct1 (ct (cn ((cc (kt ((k (mc mk)) t))) mi)))) it1)) */
	explain (verbose, analyze, format json)
	SELECT MIN(kt.kind) AS movie_kind,
	       MIN(t.title) AS complete_us_internet_movie
	FROM complete_cast AS cc,
	     comp_cast_type AS cct1,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cct1.kind = 'complete+verified'
	  AND cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND kt.kind IN ('movie',
	                  'tv movie',
	                  'video movie',
	                  'video game')
	  AND mi.note LIKE '%internet%'
	  AND mi.info IS NOT NULL
	  AND (mi.info LIKE 'USA:% 199%'
	       OR mi.info LIKE 'USA:% 200%')
	  AND t.production_year > 1990
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND t.id = cc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = cc.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = cc.movie_id
	  AND mc.movie_id = cc.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id
	  AND cct1.id = cc.status_id;
	
	
2024-06-16 02:57:59.215 UTC [3700658] ytzheng@imdbload ERROR:  canceling statement due to statement timeout
2024-06-16 02:57:59.215 UTC [3700658] ytzheng@imdbload STATEMENT:  /*+ MergeJoin(kt t mi_idx it2 cn ct mk mc mi k it1)
	 MergeJoin(mi_idx it2 cn ct mk mc mi k it1)
	 HashJoin(cn ct mk mc mi k it1)
	 HashJoin(cn ct mk mc mi k)
	 HashJoin(cn ct mk mc mi)
	 MergeJoin(ct mk mc mi)
	 NestLoop(mk mc mi)
	 HashJoin(mk mc)
	 NestLoop(mi_idx it2)
	 HashJoin(kt t)
	 SeqScan(kt)
	 SeqScan(t)
	 IndexScan(mi_idx)
	 SeqScan(it2)
	 SeqScan(cn)
	 IndexScan(ct)
	 SeqScan(mk)
	 SeqScan(mc)
	 IndexScan(mi)
	 SeqScan(k)
	 SeqScan(it1)
	 Leading(((kt t) ((mi_idx it2) (((cn (ct ((mk mc) mi))) k) it1)))) */
	explain (verbose, analyze, format json)
	SELECT MIN(cn.name) AS movie_company,
	       MIN(mi_idx.info) AS rating,
	       MIN(t.title) AS western_violent_movie
	FROM company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     info_type AS it2,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_info_idx AS mi_idx,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code != '[us]'
	  AND it1.info = 'countries'
	  AND it2.info = 'rating'
	  AND k.keyword IN ('murder',
	                    'murder-in-title',
	                    'blood',
	                    'violence')
	  AND kt.kind IN ('movie',
	                  'episode')
	  AND mc.note NOT LIKE '%(USA)%'
	  AND mc.note LIKE '%(200%)%'
	  AND mi.info IN ('Germany',
	                  'German',
	                  'USA',
	                  'American')
	  AND mi_idx.info < '7.0'
	  AND t.production_year > 2009
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mi_idx.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mi_idx.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mi.movie_id = mi_idx.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mc.movie_id = mi_idx.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND it2.id = mi_idx.info_type_id
	  AND ct.id = mc.company_type_id
	  AND cn.id = mc.company_id;
	
	
2024-06-16 02:57:59.215 UTC [3700661] FATAL:  terminating connection due to administrator command
2024-06-16 02:57:59.215 UTC [3700661] STATEMENT:  /*+ MergeJoin(kt t mi_idx it2 cn ct mk mc mi k it1)
	 MergeJoin(mi_idx it2 cn ct mk mc mi k it1)
	 HashJoin(cn ct mk mc mi k it1)
	 HashJoin(cn ct mk mc mi k)
	 HashJoin(cn ct mk mc mi)
	 MergeJoin(ct mk mc mi)
	 NestLoop(mk mc mi)
	 HashJoin(mk mc)
	 NestLoop(mi_idx it2)
	 HashJoin(kt t)
	 SeqScan(kt)
	 SeqScan(t)
	 IndexScan(mi_idx)
	 SeqScan(it2)
	 SeqScan(cn)
	 IndexScan(ct)
	 SeqScan(mk)
	 SeqScan(mc)
	 IndexScan(mi)
	 SeqScan(k)
	 SeqScan(it1)
	 Leading(((kt t) ((mi_idx it2) (((cn (ct ((mk mc) mi))) k) it1)))) */
	explain (verbose, analyze, format json)
	SELECT MIN(cn.name) AS movie_company,
	       MIN(mi_idx.info) AS rating,
	       MIN(t.title) AS western_violent_movie
	FROM company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     info_type AS it2,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_info_idx AS mi_idx,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code != '[us]'
	  AND it1.info = 'countries'
	  AND it2.info = 'rating'
	  AND k.keyword IN ('murder',
	                    'murder-in-title',
	                    'blood',
	                    'violence')
	  AND kt.kind IN ('movie',
	                  'episode')
	  AND mc.note NOT LIKE '%(USA)%'
	  AND mc.note LIKE '%(200%)%'
	  AND mi.info IN ('Germany',
	                  'German',
	                  'USA',
	                  'American')
	  AND mi_idx.info < '7.0'
	  AND t.production_year > 2009
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mi_idx.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mi_idx.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mi.movie_id = mi_idx.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mc.movie_id = mi_idx.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND it2.id = mi_idx.info_type_id
	  AND ct.id = mc.company_type_id
	  AND cn.id = mc.company_id;
	
	
2024-06-16 02:57:59.215 UTC [3700660] FATAL:  terminating connection due to administrator command
2024-06-16 02:57:59.215 UTC [3700660] STATEMENT:  /*+ MergeJoin(kt t mi_idx it2 cn ct mk mc mi k it1)
	 MergeJoin(mi_idx it2 cn ct mk mc mi k it1)
	 HashJoin(cn ct mk mc mi k it1)
	 HashJoin(cn ct mk mc mi k)
	 HashJoin(cn ct mk mc mi)
	 MergeJoin(ct mk mc mi)
	 NestLoop(mk mc mi)
	 HashJoin(mk mc)
	 NestLoop(mi_idx it2)
	 HashJoin(kt t)
	 SeqScan(kt)
	 SeqScan(t)
	 IndexScan(mi_idx)
	 SeqScan(it2)
	 SeqScan(cn)
	 IndexScan(ct)
	 SeqScan(mk)
	 SeqScan(mc)
	 IndexScan(mi)
	 SeqScan(k)
	 SeqScan(it1)
	 Leading(((kt t) ((mi_idx it2) (((cn (ct ((mk mc) mi))) k) it1)))) */
	explain (verbose, analyze, format json)
	SELECT MIN(cn.name) AS movie_company,
	       MIN(mi_idx.info) AS rating,
	       MIN(t.title) AS western_violent_movie
	FROM company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     info_type AS it2,
	     keyword AS k,
	     kind_type AS kt,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_info_idx AS mi_idx,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code != '[us]'
	  AND it1.info = 'countries'
	  AND it2.info = 'rating'
	  AND k.keyword IN ('murder',
	                    'murder-in-title',
	                    'blood',
	                    'violence')
	  AND kt.kind IN ('movie',
	                  'episode')
	  AND mc.note NOT LIKE '%(USA)%'
	  AND mc.note LIKE '%(200%)%'
	  AND mi.info IN ('Germany',
	                  'German',
	                  'USA',
	                  'American')
	  AND mi_idx.info < '7.0'
	  AND t.production_year > 2009
	  AND kt.id = t.kind_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mi_idx.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mi_idx.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mi.movie_id = mi_idx.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mc.movie_id = mi_idx.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND it2.id = mi_idx.info_type_id
	  AND ct.id = mc.company_type_id
	  AND cn.id = mc.company_id;
	
	
2024-06-16 02:57:59.263 UTC [3149592] LOG:  background worker "parallel worker" (PID 3700661) exited with exit code 1
2024-06-16 02:57:59.271 UTC [3149592] LOG:  background worker "parallel worker" (PID 3700660) exited with exit code 1
2024-06-16 03:06:48.287 UTC [3703898] ytzheng@imdbload ERROR:  canceling statement due to statement timeout
2024-06-16 03:06:48.287 UTC [3703898] ytzheng@imdbload STATEMENT:  /*+ MergeJoin(k ct mk mc t mi cn at it1)
	 HashJoin(k ct mk mc t mi cn at)
	 HashJoin(k ct mk mc t mi cn)
	 NestLoop(ct mk mc t mi cn)
	 NestLoop(ct mk mc t mi)
	 HashJoin(ct mk mc t)
	 MergeJoin(ct mk mc)
	 HashJoin(mk mc)
	 SeqScan(k)
	 IndexScan(ct)
	 SeqScan(mk)
	 IndexScan(mc)
	 SeqScan(t)
	 IndexScan(mi)
	 IndexScan(cn)
	 IndexScan(at)
	 SeqScan(it1)
	 Leading((((k ((((ct (mk mc)) t) mi) cn)) at) it1)) */
	explain (verbose, analyze, format json)
	SELECT MIN(mi.info) AS release_date,
	       MIN(t.title) AS modern_american_internet_movie
	FROM aka_title AS at,
	     company_name AS cn,
	     company_type AS ct,
	     info_type AS it1,
	     keyword AS k,
	     movie_companies AS mc,
	     movie_info AS mi,
	     movie_keyword AS mk,
	     title AS t
	WHERE cn.country_code = '[us]'
	  AND it1.info = 'release dates'
	  AND mi.note LIKE '%internet%'
	  AND mi.info IS NOT NULL
	  AND (mi.info LIKE 'USA:% 199%'
	       OR mi.info LIKE 'USA:% 200%')
	  AND t.production_year > 1990
	  AND t.id = at.movie_id
	  AND t.id = mi.movie_id
	  AND t.id = mk.movie_id
	  AND t.id = mc.movie_id
	  AND mk.movie_id = mi.movie_id
	  AND mk.movie_id = mc.movie_id
	  AND mk.movie_id = at.movie_id
	  AND mi.movie_id = mc.movie_id
	  AND mi.movie_id = at.movie_id
	  AND mc.movie_id = at.movie_id
	  AND k.id = mk.keyword_id
	  AND it1.id = mi.info_type_id
	  AND cn.id = mc.company_id
	  AND ct.id = mc.company_type_id;
	
	
